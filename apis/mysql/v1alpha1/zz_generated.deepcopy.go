//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentsObservation) DeepCopyInto(out *ComponentsObservation) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.KafkaAuthenticationMethod != nil {
		in, out := &in.KafkaAuthenticationMethod, &out.KafkaAuthenticationMethod
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentsObservation.
func (in *ComponentsObservation) DeepCopy() *ComponentsObservation {
	if in == nil {
		return nil
	}
	out := new(ComponentsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentsParameters) DeepCopyInto(out *ComponentsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentsParameters.
func (in *ComponentsParameters) DeepCopy() *ComponentsParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Database) DeepCopyInto(out *Database) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Database.
func (in *Database) DeepCopy() *Database {
	if in == nil {
		return nil
	}
	out := new(Database)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Database) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseList) DeepCopyInto(out *DatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Database, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseList.
func (in *DatabaseList) DeepCopy() *DatabaseList {
	if in == nil {
		return nil
	}
	out := new(DatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObservation) DeepCopyInto(out *DatabaseObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.ServiceName != nil {
		in, out := &in.ServiceName, &out.ServiceName
		*out = new(string)
		**out = **in
	}
	if in.TerminationProtection != nil {
		in, out := &in.TerminationProtection, &out.TerminationProtection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObservation.
func (in *DatabaseObservation) DeepCopy() *DatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseParameters) DeepCopyInto(out *DatabaseParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.ServiceName != nil {
		in, out := &in.ServiceName, &out.ServiceName
		*out = new(string)
		**out = **in
	}
	if in.ServiceNameRef != nil {
		in, out := &in.ServiceNameRef, &out.ServiceNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceNameSelector != nil {
		in, out := &in.ServiceNameSelector, &out.ServiceNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.TerminationProtection != nil {
		in, out := &in.TerminationProtection, &out.TerminationProtection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseParameters.
func (in *DatabaseParameters) DeepCopy() *DatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpec) DeepCopyInto(out *DatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpec.
func (in *DatabaseSpec) DeepCopy() *DatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseStatus) DeepCopyInto(out *DatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseStatus.
func (in *DatabaseStatus) DeepCopy() *DatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPFilterObjectObservation) DeepCopyInto(out *IPFilterObjectObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPFilterObjectObservation.
func (in *IPFilterObjectObservation) DeepCopy() *IPFilterObjectObservation {
	if in == nil {
		return nil
	}
	out := new(IPFilterObjectObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPFilterObjectParameters) DeepCopyInto(out *IPFilterObjectParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPFilterObjectParameters.
func (in *IPFilterObjectParameters) DeepCopy() *IPFilterObjectParameters {
	if in == nil {
		return nil
	}
	out := new(IPFilterObjectParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationObservation) DeepCopyInto(out *MigrationObservation) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationObservation.
func (in *MigrationObservation) DeepCopy() *MigrationObservation {
	if in == nil {
		return nil
	}
	out := new(MigrationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationParameters) DeepCopyInto(out *MigrationParameters) {
	*out = *in
	if in.Dbname != nil {
		in, out := &in.Dbname, &out.Dbname
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDbs != nil {
		in, out := &in.IgnoreDbs, &out.IgnoreDbs
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationParameters.
func (in *MigrationParameters) DeepCopy() *MigrationParameters {
	if in == nil {
		return nil
	}
	out := new(MigrationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLObservation) DeepCopyInto(out *MySQLObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLObservation.
func (in *MySQLObservation) DeepCopy() *MySQLObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLParameters) DeepCopyInto(out *MySQLParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLParameters.
func (in *MySQLParameters) DeepCopy() *MySQLParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserConfigMySQLObservation) DeepCopyInto(out *MySQLUserConfigMySQLObservation) {
	*out = *in
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(float64)
		**out = **in
	}
	if in.DefaultTimeZone != nil {
		in, out := &in.DefaultTimeZone, &out.DefaultTimeZone
		*out = new(string)
		**out = **in
	}
	if in.GroupConcatMaxLen != nil {
		in, out := &in.GroupConcatMaxLen, &out.GroupConcatMaxLen
		*out = new(float64)
		**out = **in
	}
	if in.InformationSchemaStatsExpiry != nil {
		in, out := &in.InformationSchemaStatsExpiry, &out.InformationSchemaStatsExpiry
		*out = new(float64)
		**out = **in
	}
	if in.InnodbChangeBufferMaxSize != nil {
		in, out := &in.InnodbChangeBufferMaxSize, &out.InnodbChangeBufferMaxSize
		*out = new(float64)
		**out = **in
	}
	if in.InnodbFlushNeighbors != nil {
		in, out := &in.InnodbFlushNeighbors, &out.InnodbFlushNeighbors
		*out = new(float64)
		**out = **in
	}
	if in.InnodbFtMinTokenSize != nil {
		in, out := &in.InnodbFtMinTokenSize, &out.InnodbFtMinTokenSize
		*out = new(float64)
		**out = **in
	}
	if in.InnodbFtServerStopwordTable != nil {
		in, out := &in.InnodbFtServerStopwordTable, &out.InnodbFtServerStopwordTable
		*out = new(string)
		**out = **in
	}
	if in.InnodbLockWaitTimeout != nil {
		in, out := &in.InnodbLockWaitTimeout, &out.InnodbLockWaitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.InnodbLogBufferSize != nil {
		in, out := &in.InnodbLogBufferSize, &out.InnodbLogBufferSize
		*out = new(float64)
		**out = **in
	}
	if in.InnodbOnlineAlterLogMaxSize != nil {
		in, out := &in.InnodbOnlineAlterLogMaxSize, &out.InnodbOnlineAlterLogMaxSize
		*out = new(float64)
		**out = **in
	}
	if in.InnodbPrintAllDeadlocks != nil {
		in, out := &in.InnodbPrintAllDeadlocks, &out.InnodbPrintAllDeadlocks
		*out = new(bool)
		**out = **in
	}
	if in.InnodbReadIoThreads != nil {
		in, out := &in.InnodbReadIoThreads, &out.InnodbReadIoThreads
		*out = new(float64)
		**out = **in
	}
	if in.InnodbRollbackOnTimeout != nil {
		in, out := &in.InnodbRollbackOnTimeout, &out.InnodbRollbackOnTimeout
		*out = new(bool)
		**out = **in
	}
	if in.InnodbThreadConcurrency != nil {
		in, out := &in.InnodbThreadConcurrency, &out.InnodbThreadConcurrency
		*out = new(float64)
		**out = **in
	}
	if in.InnodbWriteIoThreads != nil {
		in, out := &in.InnodbWriteIoThreads, &out.InnodbWriteIoThreads
		*out = new(float64)
		**out = **in
	}
	if in.InteractiveTimeout != nil {
		in, out := &in.InteractiveTimeout, &out.InteractiveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.InternalTmpMemStorageEngine != nil {
		in, out := &in.InternalTmpMemStorageEngine, &out.InternalTmpMemStorageEngine
		*out = new(string)
		**out = **in
	}
	if in.LongQueryTime != nil {
		in, out := &in.LongQueryTime, &out.LongQueryTime
		*out = new(float64)
		**out = **in
	}
	if in.MaxAllowedPacket != nil {
		in, out := &in.MaxAllowedPacket, &out.MaxAllowedPacket
		*out = new(float64)
		**out = **in
	}
	if in.MaxHeapTableSize != nil {
		in, out := &in.MaxHeapTableSize, &out.MaxHeapTableSize
		*out = new(float64)
		**out = **in
	}
	if in.NetBufferLength != nil {
		in, out := &in.NetBufferLength, &out.NetBufferLength
		*out = new(float64)
		**out = **in
	}
	if in.NetReadTimeout != nil {
		in, out := &in.NetReadTimeout, &out.NetReadTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetWriteTimeout != nil {
		in, out := &in.NetWriteTimeout, &out.NetWriteTimeout
		*out = new(float64)
		**out = **in
	}
	if in.SQLMode != nil {
		in, out := &in.SQLMode, &out.SQLMode
		*out = new(string)
		**out = **in
	}
	if in.SQLRequirePrimaryKey != nil {
		in, out := &in.SQLRequirePrimaryKey, &out.SQLRequirePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.SlowQueryLog != nil {
		in, out := &in.SlowQueryLog, &out.SlowQueryLog
		*out = new(bool)
		**out = **in
	}
	if in.SortBufferSize != nil {
		in, out := &in.SortBufferSize, &out.SortBufferSize
		*out = new(float64)
		**out = **in
	}
	if in.TmpTableSize != nil {
		in, out := &in.TmpTableSize, &out.TmpTableSize
		*out = new(float64)
		**out = **in
	}
	if in.WaitTimeout != nil {
		in, out := &in.WaitTimeout, &out.WaitTimeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserConfigMySQLObservation.
func (in *MySQLUserConfigMySQLObservation) DeepCopy() *MySQLUserConfigMySQLObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLUserConfigMySQLObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserConfigMySQLParameters) DeepCopyInto(out *MySQLUserConfigMySQLParameters) {
	*out = *in
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(float64)
		**out = **in
	}
	if in.DefaultTimeZone != nil {
		in, out := &in.DefaultTimeZone, &out.DefaultTimeZone
		*out = new(string)
		**out = **in
	}
	if in.GroupConcatMaxLen != nil {
		in, out := &in.GroupConcatMaxLen, &out.GroupConcatMaxLen
		*out = new(float64)
		**out = **in
	}
	if in.InformationSchemaStatsExpiry != nil {
		in, out := &in.InformationSchemaStatsExpiry, &out.InformationSchemaStatsExpiry
		*out = new(float64)
		**out = **in
	}
	if in.InnodbChangeBufferMaxSize != nil {
		in, out := &in.InnodbChangeBufferMaxSize, &out.InnodbChangeBufferMaxSize
		*out = new(float64)
		**out = **in
	}
	if in.InnodbFlushNeighbors != nil {
		in, out := &in.InnodbFlushNeighbors, &out.InnodbFlushNeighbors
		*out = new(float64)
		**out = **in
	}
	if in.InnodbFtMinTokenSize != nil {
		in, out := &in.InnodbFtMinTokenSize, &out.InnodbFtMinTokenSize
		*out = new(float64)
		**out = **in
	}
	if in.InnodbFtServerStopwordTable != nil {
		in, out := &in.InnodbFtServerStopwordTable, &out.InnodbFtServerStopwordTable
		*out = new(string)
		**out = **in
	}
	if in.InnodbLockWaitTimeout != nil {
		in, out := &in.InnodbLockWaitTimeout, &out.InnodbLockWaitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.InnodbLogBufferSize != nil {
		in, out := &in.InnodbLogBufferSize, &out.InnodbLogBufferSize
		*out = new(float64)
		**out = **in
	}
	if in.InnodbOnlineAlterLogMaxSize != nil {
		in, out := &in.InnodbOnlineAlterLogMaxSize, &out.InnodbOnlineAlterLogMaxSize
		*out = new(float64)
		**out = **in
	}
	if in.InnodbPrintAllDeadlocks != nil {
		in, out := &in.InnodbPrintAllDeadlocks, &out.InnodbPrintAllDeadlocks
		*out = new(bool)
		**out = **in
	}
	if in.InnodbReadIoThreads != nil {
		in, out := &in.InnodbReadIoThreads, &out.InnodbReadIoThreads
		*out = new(float64)
		**out = **in
	}
	if in.InnodbRollbackOnTimeout != nil {
		in, out := &in.InnodbRollbackOnTimeout, &out.InnodbRollbackOnTimeout
		*out = new(bool)
		**out = **in
	}
	if in.InnodbThreadConcurrency != nil {
		in, out := &in.InnodbThreadConcurrency, &out.InnodbThreadConcurrency
		*out = new(float64)
		**out = **in
	}
	if in.InnodbWriteIoThreads != nil {
		in, out := &in.InnodbWriteIoThreads, &out.InnodbWriteIoThreads
		*out = new(float64)
		**out = **in
	}
	if in.InteractiveTimeout != nil {
		in, out := &in.InteractiveTimeout, &out.InteractiveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.InternalTmpMemStorageEngine != nil {
		in, out := &in.InternalTmpMemStorageEngine, &out.InternalTmpMemStorageEngine
		*out = new(string)
		**out = **in
	}
	if in.LongQueryTime != nil {
		in, out := &in.LongQueryTime, &out.LongQueryTime
		*out = new(float64)
		**out = **in
	}
	if in.MaxAllowedPacket != nil {
		in, out := &in.MaxAllowedPacket, &out.MaxAllowedPacket
		*out = new(float64)
		**out = **in
	}
	if in.MaxHeapTableSize != nil {
		in, out := &in.MaxHeapTableSize, &out.MaxHeapTableSize
		*out = new(float64)
		**out = **in
	}
	if in.NetBufferLength != nil {
		in, out := &in.NetBufferLength, &out.NetBufferLength
		*out = new(float64)
		**out = **in
	}
	if in.NetReadTimeout != nil {
		in, out := &in.NetReadTimeout, &out.NetReadTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetWriteTimeout != nil {
		in, out := &in.NetWriteTimeout, &out.NetWriteTimeout
		*out = new(float64)
		**out = **in
	}
	if in.SQLMode != nil {
		in, out := &in.SQLMode, &out.SQLMode
		*out = new(string)
		**out = **in
	}
	if in.SQLRequirePrimaryKey != nil {
		in, out := &in.SQLRequirePrimaryKey, &out.SQLRequirePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.SlowQueryLog != nil {
		in, out := &in.SlowQueryLog, &out.SlowQueryLog
		*out = new(bool)
		**out = **in
	}
	if in.SortBufferSize != nil {
		in, out := &in.SortBufferSize, &out.SortBufferSize
		*out = new(float64)
		**out = **in
	}
	if in.TmpTableSize != nil {
		in, out := &in.TmpTableSize, &out.TmpTableSize
		*out = new(float64)
		**out = **in
	}
	if in.WaitTimeout != nil {
		in, out := &in.WaitTimeout, &out.WaitTimeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserConfigMySQLParameters.
func (in *MySQLUserConfigMySQLParameters) DeepCopy() *MySQLUserConfigMySQLParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLUserConfigMySQLParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserConfigObservation) DeepCopyInto(out *MySQLUserConfigObservation) {
	*out = *in
	if in.AdditionalBackupRegions != nil {
		in, out := &in.AdditionalBackupRegions, &out.AdditionalBackupRegions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(float64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(float64)
		**out = **in
	}
	if in.BinlogRetentionPeriod != nil {
		in, out := &in.BinlogRetentionPeriod, &out.BinlogRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPFilterObject != nil {
		in, out := &in.IPFilterObject, &out.IPFilterObject
		*out = make([]IPFilterObjectObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IPFilterString != nil {
		in, out := &in.IPFilterString, &out.IPFilterString
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]MigrationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = make([]MySQLUserConfigMySQLObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLVersion != nil {
		in, out := &in.MySQLVersion, &out.MySQLVersion
		*out = new(string)
		**out = **in
	}
	if in.PrivateAccess != nil {
		in, out := &in.PrivateAccess, &out.PrivateAccess
		*out = make([]PrivateAccessObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PrivatelinkAccess != nil {
		in, out := &in.PrivatelinkAccess, &out.PrivatelinkAccess
		*out = make([]PrivatelinkAccessObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ProjectToForkFrom != nil {
		in, out := &in.ProjectToForkFrom, &out.ProjectToForkFrom
		*out = new(string)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = make([]PublicAccessObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RecoveryTargetTime != nil {
		in, out := &in.RecoveryTargetTime, &out.RecoveryTargetTime
		*out = new(string)
		**out = **in
	}
	if in.ServiceToForkFrom != nil {
		in, out := &in.ServiceToForkFrom, &out.ServiceToForkFrom
		*out = new(string)
		**out = **in
	}
	if in.StaticIps != nil {
		in, out := &in.StaticIps, &out.StaticIps
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserConfigObservation.
func (in *MySQLUserConfigObservation) DeepCopy() *MySQLUserConfigObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLUserConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserConfigParameters) DeepCopyInto(out *MySQLUserConfigParameters) {
	*out = *in
	if in.AdditionalBackupRegions != nil {
		in, out := &in.AdditionalBackupRegions, &out.AdditionalBackupRegions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.BackupHour != nil {
		in, out := &in.BackupHour, &out.BackupHour
		*out = new(float64)
		**out = **in
	}
	if in.BackupMinute != nil {
		in, out := &in.BackupMinute, &out.BackupMinute
		*out = new(float64)
		**out = **in
	}
	if in.BinlogRetentionPeriod != nil {
		in, out := &in.BinlogRetentionPeriod, &out.BinlogRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.IPFilter != nil {
		in, out := &in.IPFilter, &out.IPFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPFilterObject != nil {
		in, out := &in.IPFilterObject, &out.IPFilterObject
		*out = make([]IPFilterObjectParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IPFilterString != nil {
		in, out := &in.IPFilterString, &out.IPFilterString
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = make([]MigrationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = make([]MySQLUserConfigMySQLParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLVersion != nil {
		in, out := &in.MySQLVersion, &out.MySQLVersion
		*out = new(string)
		**out = **in
	}
	if in.PrivateAccess != nil {
		in, out := &in.PrivateAccess, &out.PrivateAccess
		*out = make([]PrivateAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PrivatelinkAccess != nil {
		in, out := &in.PrivatelinkAccess, &out.PrivatelinkAccess
		*out = make([]PrivatelinkAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ProjectToForkFrom != nil {
		in, out := &in.ProjectToForkFrom, &out.ProjectToForkFrom
		*out = new(string)
		**out = **in
	}
	if in.PublicAccess != nil {
		in, out := &in.PublicAccess, &out.PublicAccess
		*out = make([]PublicAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RecoveryTargetTime != nil {
		in, out := &in.RecoveryTargetTime, &out.RecoveryTargetTime
		*out = new(string)
		**out = **in
	}
	if in.ServiceToForkFrom != nil {
		in, out := &in.ServiceToForkFrom, &out.ServiceToForkFrom
		*out = new(string)
		**out = **in
	}
	if in.StaticIps != nil {
		in, out := &in.StaticIps, &out.StaticIps
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserConfigParameters.
func (in *MySQLUserConfigParameters) DeepCopy() *MySQLUserConfigParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLUserConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateAccessObservation) DeepCopyInto(out *PrivateAccessObservation) {
	*out = *in
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = new(bool)
		**out = **in
	}
	if in.Mysqlx != nil {
		in, out := &in.Mysqlx, &out.Mysqlx
		*out = new(bool)
		**out = **in
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateAccessObservation.
func (in *PrivateAccessObservation) DeepCopy() *PrivateAccessObservation {
	if in == nil {
		return nil
	}
	out := new(PrivateAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateAccessParameters) DeepCopyInto(out *PrivateAccessParameters) {
	*out = *in
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = new(bool)
		**out = **in
	}
	if in.Mysqlx != nil {
		in, out := &in.Mysqlx, &out.Mysqlx
		*out = new(bool)
		**out = **in
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateAccessParameters.
func (in *PrivateAccessParameters) DeepCopy() *PrivateAccessParameters {
	if in == nil {
		return nil
	}
	out := new(PrivateAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivatelinkAccessObservation) DeepCopyInto(out *PrivatelinkAccessObservation) {
	*out = *in
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = new(bool)
		**out = **in
	}
	if in.Mysqlx != nil {
		in, out := &in.Mysqlx, &out.Mysqlx
		*out = new(bool)
		**out = **in
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivatelinkAccessObservation.
func (in *PrivatelinkAccessObservation) DeepCopy() *PrivatelinkAccessObservation {
	if in == nil {
		return nil
	}
	out := new(PrivatelinkAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivatelinkAccessParameters) DeepCopyInto(out *PrivatelinkAccessParameters) {
	*out = *in
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = new(bool)
		**out = **in
	}
	if in.Mysqlx != nil {
		in, out := &in.Mysqlx, &out.Mysqlx
		*out = new(bool)
		**out = **in
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivatelinkAccessParameters.
func (in *PrivatelinkAccessParameters) DeepCopy() *PrivatelinkAccessParameters {
	if in == nil {
		return nil
	}
	out := new(PrivatelinkAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicAccessObservation) DeepCopyInto(out *PublicAccessObservation) {
	*out = *in
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = new(bool)
		**out = **in
	}
	if in.Mysqlx != nil {
		in, out := &in.Mysqlx, &out.Mysqlx
		*out = new(bool)
		**out = **in
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicAccessObservation.
func (in *PublicAccessObservation) DeepCopy() *PublicAccessObservation {
	if in == nil {
		return nil
	}
	out := new(PublicAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicAccessParameters) DeepCopyInto(out *PublicAccessParameters) {
	*out = *in
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = new(bool)
		**out = **in
	}
	if in.Mysqlx != nil {
		in, out := &in.Mysqlx, &out.Mysqlx
		*out = new(bool)
		**out = **in
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicAccessParameters.
func (in *PublicAccessParameters) DeepCopy() *PublicAccessParameters {
	if in == nil {
		return nil
	}
	out := new(PublicAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Service) DeepCopyInto(out *Service) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Service.
func (in *Service) DeepCopy() *Service {
	if in == nil {
		return nil
	}
	out := new(Service)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Service) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceIntegrationsObservation) DeepCopyInto(out *ServiceIntegrationsObservation) {
	*out = *in
	if in.IntegrationType != nil {
		in, out := &in.IntegrationType, &out.IntegrationType
		*out = new(string)
		**out = **in
	}
	if in.SourceServiceName != nil {
		in, out := &in.SourceServiceName, &out.SourceServiceName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceIntegrationsObservation.
func (in *ServiceIntegrationsObservation) DeepCopy() *ServiceIntegrationsObservation {
	if in == nil {
		return nil
	}
	out := new(ServiceIntegrationsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceIntegrationsParameters) DeepCopyInto(out *ServiceIntegrationsParameters) {
	*out = *in
	if in.IntegrationType != nil {
		in, out := &in.IntegrationType, &out.IntegrationType
		*out = new(string)
		**out = **in
	}
	if in.SourceServiceName != nil {
		in, out := &in.SourceServiceName, &out.SourceServiceName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceIntegrationsParameters.
func (in *ServiceIntegrationsParameters) DeepCopy() *ServiceIntegrationsParameters {
	if in == nil {
		return nil
	}
	out := new(ServiceIntegrationsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceList) DeepCopyInto(out *ServiceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Service, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceList.
func (in *ServiceList) DeepCopy() *ServiceList {
	if in == nil {
		return nil
	}
	out := new(ServiceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServiceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceObservation) DeepCopyInto(out *ServiceObservation) {
	*out = *in
	if in.AdditionalDiskSpace != nil {
		in, out := &in.AdditionalDiskSpace, &out.AdditionalDiskSpace
		*out = new(string)
		**out = **in
	}
	if in.CloudName != nil {
		in, out := &in.CloudName, &out.CloudName
		*out = new(string)
		**out = **in
	}
	if in.Components != nil {
		in, out := &in.Components, &out.Components
		*out = make([]ComponentsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DiskSpace != nil {
		in, out := &in.DiskSpace, &out.DiskSpace
		*out = new(string)
		**out = **in
	}
	if in.DiskSpaceCap != nil {
		in, out := &in.DiskSpaceCap, &out.DiskSpaceCap
		*out = new(string)
		**out = **in
	}
	if in.DiskSpaceDefault != nil {
		in, out := &in.DiskSpaceDefault, &out.DiskSpaceDefault
		*out = new(string)
		**out = **in
	}
	if in.DiskSpaceStep != nil {
		in, out := &in.DiskSpaceStep, &out.DiskSpaceStep
		*out = new(string)
		**out = **in
	}
	if in.DiskSpaceUsed != nil {
		in, out := &in.DiskSpaceUsed, &out.DiskSpaceUsed
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = make([]MySQLObservation, len(*in))
		copy(*out, *in)
	}
	if in.MySQLUserConfig != nil {
		in, out := &in.MySQLUserConfig, &out.MySQLUserConfig
		*out = make([]MySQLUserConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.ProjectVPCID != nil {
		in, out := &in.ProjectVPCID, &out.ProjectVPCID
		*out = new(string)
		**out = **in
	}
	if in.ServiceHost != nil {
		in, out := &in.ServiceHost, &out.ServiceHost
		*out = new(string)
		**out = **in
	}
	if in.ServiceIntegrations != nil {
		in, out := &in.ServiceIntegrations, &out.ServiceIntegrations
		*out = make([]ServiceIntegrationsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServicePort != nil {
		in, out := &in.ServicePort, &out.ServicePort
		*out = new(float64)
		**out = **in
	}
	if in.ServiceType != nil {
		in, out := &in.ServiceType, &out.ServiceType
		*out = new(string)
		**out = **in
	}
	if in.ServiceUsername != nil {
		in, out := &in.ServiceUsername, &out.ServiceUsername
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.StaticIps != nil {
		in, out := &in.StaticIps, &out.StaticIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = make([]TagObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TerminationProtection != nil {
		in, out := &in.TerminationProtection, &out.TerminationProtection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceObservation.
func (in *ServiceObservation) DeepCopy() *ServiceObservation {
	if in == nil {
		return nil
	}
	out := new(ServiceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceParameters) DeepCopyInto(out *ServiceParameters) {
	*out = *in
	if in.AdditionalDiskSpace != nil {
		in, out := &in.AdditionalDiskSpace, &out.AdditionalDiskSpace
		*out = new(string)
		**out = **in
	}
	if in.CloudName != nil {
		in, out := &in.CloudName, &out.CloudName
		*out = new(string)
		**out = **in
	}
	if in.DiskSpace != nil {
		in, out := &in.DiskSpace, &out.DiskSpace
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowDow != nil {
		in, out := &in.MaintenanceWindowDow, &out.MaintenanceWindowDow
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindowTime != nil {
		in, out := &in.MaintenanceWindowTime, &out.MaintenanceWindowTime
		*out = new(string)
		**out = **in
	}
	if in.MySQLUserConfig != nil {
		in, out := &in.MySQLUserConfig, &out.MySQLUserConfig
		*out = make([]MySQLUserConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.ProjectVPCID != nil {
		in, out := &in.ProjectVPCID, &out.ProjectVPCID
		*out = new(string)
		**out = **in
	}
	if in.ServiceIntegrations != nil {
		in, out := &in.ServiceIntegrations, &out.ServiceIntegrations
		*out = make([]ServiceIntegrationsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StaticIps != nil {
		in, out := &in.StaticIps, &out.StaticIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = make([]TagParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TerminationProtection != nil {
		in, out := &in.TerminationProtection, &out.TerminationProtection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceParameters.
func (in *ServiceParameters) DeepCopy() *ServiceParameters {
	if in == nil {
		return nil
	}
	out := new(ServiceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceSpec) DeepCopyInto(out *ServiceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceSpec.
func (in *ServiceSpec) DeepCopy() *ServiceSpec {
	if in == nil {
		return nil
	}
	out := new(ServiceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceStatus) DeepCopyInto(out *ServiceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceStatus.
func (in *ServiceStatus) DeepCopy() *ServiceStatus {
	if in == nil {
		return nil
	}
	out := new(ServiceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagObservation) DeepCopyInto(out *TagObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagObservation.
func (in *TagObservation) DeepCopy() *TagObservation {
	if in == nil {
		return nil
	}
	out := new(TagObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagParameters) DeepCopyInto(out *TagParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagParameters.
func (in *TagParameters) DeepCopy() *TagParameters {
	if in == nil {
		return nil
	}
	out := new(TagParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *User) DeepCopyInto(out *User) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new User.
func (in *User) DeepCopy() *User {
	if in == nil {
		return nil
	}
	out := new(User)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *User) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserList) DeepCopyInto(out *UserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]User, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserList.
func (in *UserList) DeepCopy() *UserList {
	if in == nil {
		return nil
	}
	out := new(UserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserObservation) DeepCopyInto(out *UserObservation) {
	*out = *in
	if in.Authentication != nil {
		in, out := &in.Authentication, &out.Authentication
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.ServiceName != nil {
		in, out := &in.ServiceName, &out.ServiceName
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserObservation.
func (in *UserObservation) DeepCopy() *UserObservation {
	if in == nil {
		return nil
	}
	out := new(UserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserParameters) DeepCopyInto(out *UserParameters) {
	*out = *in
	if in.Authentication != nil {
		in, out := &in.Authentication, &out.Authentication
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.ServiceName != nil {
		in, out := &in.ServiceName, &out.ServiceName
		*out = new(string)
		**out = **in
	}
	if in.ServiceNameRef != nil {
		in, out := &in.ServiceNameRef, &out.ServiceNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceNameSelector != nil {
		in, out := &in.ServiceNameSelector, &out.ServiceNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserParameters.
func (in *UserParameters) DeepCopy() *UserParameters {
	if in == nil {
		return nil
	}
	out := new(UserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserSpec) DeepCopyInto(out *UserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserSpec.
func (in *UserSpec) DeepCopy() *UserSpec {
	if in == nil {
		return nil
	}
	out := new(UserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserStatus) DeepCopyInto(out *UserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserStatus.
func (in *UserStatus) DeepCopy() *UserStatus {
	if in == nil {
		return nil
	}
	out := new(UserStatus)
	in.DeepCopyInto(out)
	return out
}
